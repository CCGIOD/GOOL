/**
 *
 * Copyright (C) 1996, 1997 Sun Microsystems Inc.
 *
 * Use of this file and the system it is part of is constrained by the
 * file COPYRIGHT in the root directory of this system.  You may, however,
 * make any modifications you wish to this file.
 *
 * Author: Sreenivasa Viswanadha
 * Date: 3/20/97
 *
 * This file contains a Java grammar and actions that implement a front-end.
 *
 *
 * Derived in part from the following work:
 *
 * PUBLIC DOMAIN PCCTS-BASED C++ GRAMMAR (cplusplus.g, stat.g, expr.g)
 *
 * Authors: Sumana Srinivasan, NeXT Inc.;            sumana_srinivasan@next.com
 *          Terence Parr, Parr Research Corporation; parrt@parr-research.com
 *          Russell Quong, Purdue University;        quong@ecn.purdue.edu
 *
 * VERSION 1.1
 *
 */
options {
  STATIC=true;
  TRACK_TOKENS=true;
  VISITOR=true;
  MULTI=true;
  NODE_PREFIX="";
}

PARSER_BEGIN(CPPParser)
//package net.sourceforge.pmd.cpd.cppast;

package gool.parser.cpp;

public final class CPPParser {

  private static String vers = "0.1";
  private static String id = "C++ Parser";
  
  private static void msg(String s) {
      System.out.println(id + " Version " + vers +": " + s);
  }

  public static void main(String args[]) {
    CPPParser parser;
    java.io.InputStream input;

    int ai = 0;

    if (ai == (args.length-1)) {
      msg("Reading from file " + args[ai] + " . . .");
      try {
        input = new java.io.FileInputStream(args[ai]);
      } catch (java.io.FileNotFoundException e) {
        msg("File " + args[0] + " not found.");
        return;
      }
    } else if (ai >= args.length) {
      msg("Reading from standard input . . .");
      input = System.in;
    } else {
      msg("Usage: java " + id + " [-d] [inputfile]");
      return;
    }

    try {
      parser = new CPPParser(input);
      SimpleNode root = parser.translation_unit();
      root.dump("");
      parser.translation_unit();
      msg("Program parsed successfully.");
    } catch (ParseException e) {
      msg("Encountered errors during parse.");
    }
  }

	public static java.util.List<SimpleNode> getCppAST (){
		CPPParser parser  = null;
		java.io.InputStream input;
		java.util.List<SimpleNode> toReturn = new java.util.ArrayList<SimpleNode>();
		java.io.File rep = new java.io.File("GOOLINPUTCPP/");
		String [] listefichiers=rep.list();
		java.util.Arrays.sort(listefichiers, new java.util.Comparator<String>() {
                    @Override public int compare(String s1, String s2) {
                        if (s1.compareTo(s2) == 0)
                        	return 0;
                        else if (s1.endsWith(".h"))
                        	return -1;
                        else
                        	return 1;
                    }           
                });
		boolean first = true;
		for(int i=0;i<listefichiers.length;i++){ 
			if(listefichiers[i].endsWith(".cpp") || listefichiers[i].endsWith(".h")){
				String filename = listefichiers[i];
				try {
					input = new java.io.FileInputStream("GOOLINPUTCPP/"+filename);
					if (first){
						parser = new CPPParser(input);
						first=false;
						}
					else
                    	parser.ReInit(input);
					SimpleNode ast = translation_unit();
					ast.jjtSetValue(filename);
					toReturn.add(ast);	 
				} catch (java.io.FileNotFoundException e) {
					return null;
				} catch (ParseException e) {
      				System.out.println(e.toString());
					return null;
				}
			}
		}		
		return toReturn;	
	}

  /**
   * A symbol table manager object. Currently only types are recorded for
   * doing semantic predicates for parsing.
   */
  static SymtabManager sym;

  /*
   * Methods used in semantics predicates.
   */

  /**
   * Reads a fully qualified name (since it is used during lookahead, we
   * cannot use token. We have to explicitly use getToken).
   */
  static String GetFullyScopedName() /*throws ParseException*/
  {
     Token t = getToken(1);

     if (t.kind != ID && t.kind != SCOPE)
        return null;

     StringBuffer s = new StringBuffer();

     int i;
     if (t.kind != SCOPE)
     {
        s.append(t.image);
        t = getToken(2);
        i = 3;
     }
     else
        i = 2;

     while (t.kind == SCOPE)
     {
        s.append(t.image);
        s.append((t = getToken(i++)).image);
        t = getToken(i++);
     }

     return s.toString();
  }

  /**
   * This method first tries to read a sequence of tokens of the form
   *             ("::")? <ID> ("::" <ID>)*
   * and if it succeeds then asks the symbol table manager  if this is
   * the name of a constructor.
   */
  static boolean IsCtor() /*throws ParseException*/
  {
      return sym.IsCtor(GetFullyScopedName());
  }
}

PARSER_END(CPPParser)

SKIP :
{
  " "
|
  "\t"
|
  "\r\n"
|
  "\n"
|
  "//" : IN_LINE_COMMENT
|
  "/*" : IN_COMMENT
|
  "#ifdef" : PREPROCESSOR_OUTPUT
|
  "#ifndef" : PREPROCESSOR_OUTPUT
|
  "#endif" : PREPROCESSOR_OUTPUT
}

<IN_LINE_COMMENT> SKIP:
{
   "\n" : DEFAULT
}

<IN_LINE_COMMENT> MORE:
{
  < ~[] >
}

<IN_COMMENT> SKIP:
{
   "*/" : DEFAULT
}

<IN_COMMENT> MORE:
{
  < ~[] >
}

<PREPROCESSOR_OUTPUT> SKIP:
{
   "\n" : DEFAULT
}

<PREPROCESSOR_OUTPUT> MORE:
{
  "\\\n"
  |
  "\\\r\n"
  |
  < ~[] >
}


TOKEN :
{
  < LCURLYBRACE: "{" >
| < RCURLYBRACE: "}" >
| < LSQUAREBRACKET: "[" >
| < RSQUAREBRACKET: "]" >
| < LPARENTHESIS: "(" >
| < RPARENTHESIS: ")" >
| < SCOPE: "::" >
| < COLON: ":" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < QUESTIONMARK: "?" >
| < ELLIPSIS: "..." >
| < ASSIGNEQUAL: "=" >
| < TIMESEQUAL: "*=" >
| < DIVIDEEQUAL: "/=" >
| < MODEQUAL: "%=" >
| < PLUSEQUAL: "+=" >
| < MINUSEQUAL: "-=" >
| < SHIFTLEFTEQUAL: "<<=" >
| < SHIFTRIGHTEQUAL: ">>=" >
| < BITWISEANDEQUAL: "&=" >
| < BITWISEXOREQUAL: "^=" >
| < BITWISEOREQUAL: "|=" >
| < OR: "||" >
| < AND: "&&" >
| < BITWISEOR: "|" >
| < BITWISEXOR: "^" >
| < AMPERSAND: "&" >
| < EQUAL: "==" >
| < NOTEQUAL: "!=" >
| < LESSTHAN: "<" >
| < GREATERTHAN: ">" >
| < LESSTHANOREQUALTO: "<=" >
| < GREATERTHANOREQUALTO: ">=" >
| < SHIFTLEFT: "<<" >
| < SHIFTRIGHT: ">>" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < DIVIDE: "/" >
| < MOD: "%" >
| < PLUSPLUS: "++" >
| < MINUSMINUS: "--" >
| < TILDE: "~" >
| < NOT: "!" >
| < DOT: "." >
| < POINTERTO: "->" >
| < DOTSTAR: ".*" >
| < ARROWSTAR: "->*" >
| < AUTO: "auto" >
| < BREAK: "break" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DELETE: "delete" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTERN: "extern" >
| < FLOAT: "float" >
| < FOR: "for" >
| < FRIEND: "friend" >
| < GOTO: "goto" >
| < IF: "if" >
| < INLINE: "inline" >
| < INT: "int" >
| < LONG: "long" >
| < NEW: "new" >
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < REDECLARED: "redeclared" >
| < REGISTER: "register" >
| < RETURN: "return" >
| < SHORT: "short" >
| < SIGNED: "signed" >
| < SIZEOF: "sizeof" >
| < STATIC: "static" >
| < STRUCT: "struct" >
| < CLASS : "class" >
| < SWITCH: "switch" >
| < TEMPLATE: "template" >
| < THIS: "this" >
| < TRY: "try" >
| < TYPEDEF: "typedef" >
| < UNION: "union" >
| < UNSIGNED: "unsigned" >
| < VIRTUAL: "virtual" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
| < OPERATOR: "operator" >
| < TRUETOK: "true" >
| < FALSETOK: "false" >
| < THROW: "throw" >
| < INCLUDE: "#include" >
}

TOKEN [IGNORE_CASE] :
{
  <  OCTALINT : "0" (["0"-"7"])* >
| <  OCTALLONG : <OCTALINT> "l" >
| <  UNSIGNED_OCTALINT : <OCTALINT> "u" >
| <  UNSIGNED_OCTALLONG : <OCTALINT> ("ul" | "lu") >

| <  DECIMALINT : ["1"-"9"] (["0"-"9"])* >
| <  DECIMALLONG : <DECIMALINT> ["u","l"] >
| <  UNSIGNED_DECIMALINT : <DECIMALINT> "u" >
| <  UNSIGNED_DECIMALLONG : <DECIMALINT> ("ul" | "lu") >


| <  HEXADECIMALINT : "0x" (["0"-"9","a"-"f"])+ >
| <  HEXADECIMALLONG : <HEXADECIMALINT> (["u","l"])? >
| <  UNSIGNED_HEXADECIMALINT : <HEXADECIMALINT> "u" >
| <  UNSIGNED_HEXADECIMALLONG : <HEXADECIMALINT> ("ul" | "lu") >


| <  FLOATONE : ((["0"-"9"])+ "." (["0"-"9"])* | (["0"-"9"])* "." (["0"-"9"])+)
              ("e" (["-","+"])? (["0"-"9"])+)? (["f","l"])? >

| <  FLOATTWO : (["0"-"9"])+ "e" (["-","+"])?  (["0"-"9"])+ (["f","l"])? >

}

TOKEN :
{

  <  CHARACTER : ("L")? "'"
   (   (~["'","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\""]
            |
             "0" (["0"-"7"])*
            |
             ["1"-"9"] (["0"-"9"])*
            |
             ("0x" | "0X") (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )
   "'" >
| <  PATH_STRING :  "<" (["a"-"z","A"-"Z","0"-"9",".","-","_"," ","/"])+ ">" >

| <  STRING : ("L")? "\""
   ( ( ~["\"","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\"","\n"]
            |
             "0" (["0"-"7"])*
            |
             ["1"-"9"] (["0"-"9"])*
            |
             ("0x" | "0X") (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )*
   "\"" >

}

SimpleNode translation_unit() #TRANSLATION_UNIT :
{}
{
   { sym.OpenScope(null, false); sym.PutTypeName("Test"); }
	(  LOOKAHEAD(2) external_declaration() )* <EOF>
   { sym.CloseScope(); }
   { return jjtThis; }
}



void external_declaration() #EXTERNAL_DECLARATION :
{ boolean isTypedef = false;}
{
    <INCLUDE> include_specifer()
   | 
    LOOKAHEAD(("typedef" | template_head())? class_head()  "{")
       ( template_head() )? declaration() 
   |
    LOOKAHEAD("enum" (<ID>)? "{")
       enum_specifier() (init_declarator_list(false))?  ";"
   |
    LOOKAHEAD ((template_head())? dtor_ctor_decl_spec()
                               dtor_declarator() "{")
       dtor_definition()
   |
    LOOKAHEAD(dtor_ctor_decl_spec() ctor_declarator_lookahead())
       ctor_definition()

   |
    LOOKAHEAD((declaration_specifiers())?  function_declarator_lookahead())
       function_definition()

   |
    LOOKAHEAD((scope_override())? "operator")
         conversion_function_decl_or_def()
   |
    template_head()
      (
        LOOKAHEAD(dtor_ctor_decl_spec() ctor_declarator_lookahead())
           ctor_definition()
      |
        LOOKAHEAD((declaration_specifiers())?  function_declarator_lookahead())
           function_definition()
      |
        isTypedef = declaration_specifiers()
               (init_declarator_list(isTypedef))?  ";"
      ) 
   |
    declaration()
   |
    ";"
}

void include_specifer() #INCLUDE_SPECIFER :
{
  Token t;
}
{

      t=<PATH_STRING> {jjtThis.value=t.image; }
    | t=<STRING> {jjtThis.value=t.image; }
}

void function_definition() #FUNCTION_DEFINITION :
{
   Scope sc = null;
   boolean isTypedef;
}
{

    LOOKAHEAD(3) isTypedef = declaration_specifiers()
        sc = function_declarator(isTypedef) func_decl_def(sc)
   |
    sc = function_declarator(false) func_decl_def(sc)
}

void func_decl_def(Scope sc) #FUNC_DECL_DEF :
{
   boolean closeReqd = false;
}
{
  {
     if (closeReqd = (sc != null && sc != sym.GetCurScope()))
        sym.OpenScope(sc);
  }

  (
    ";"
   |
    compound_statement()
  )

  { if (closeReqd) sym.CloseScope(); }
}

void linkage_specification() #LINKAGE_SPECIFICATION :
{}
{
   "extern" <STRING>
   (
    "{" ( external_declaration() )* "}"
      ( LOOKAHEAD(";") ";")?
   |
    declaration()
   )
}


void declaration() #DECLARATION :
{ boolean isTypedef = false; }
{
    LOOKAHEAD(2)
      isTypedef = declaration_specifiers()
               (init_declarator_list(isTypedef))? ";"
   |
    linkage_specification()
}

/**
 * Very temporary. Just returns true if it sees a typedef. Finally, we will
 * need a structure that stores all the attributes.
 */
boolean type_modifiers() #TYPE_MODIFIERS :
{ boolean isTypedef = false; }
{
   (
     isTypedef = storage_class_specifier()
    |
     type_qualifier()
    |
     "inline"
    |
     "virtual" {jjtThis.value="virtual";}
    |
     "friend"
   )

   { return isTypedef; }
}

/**
 * Very temporary. Just returns true if it sees a typedef. Finally, we will
 * need a structure that stores all the attributes.
 */
boolean declaration_specifiers() #DECLARATION_SPECIFIERS :
{
   Token t;
   boolean isTypedef = false, tmp;
}
{
 (
   (
      LOOKAHEAD(type_modifiers()) tmp = type_modifiers() { isTypedef |= tmp; }
   )+

    [ LOOKAHEAD(2) (
     LOOKAHEAD(builtin_type_specifier()) builtin_type_specifier()
         (  LOOKAHEAD(2) (
            LOOKAHEAD(builtin_type_specifier()) builtin_type_specifier()
          |
            LOOKAHEAD(type_modifiers()) tmp = type_modifiers() )
                                        { isTypedef |= tmp; }
         )* 
    |
     (
        class_specifier()
      |
        enum_specifier()
      |
        qualified_type()
     )
     (LOOKAHEAD(2) tmp = type_modifiers() { isTypedef |= tmp;} )*
    ) ] 
   |
    LOOKAHEAD(builtin_type_specifier()) builtin_type_specifier()
         ( LOOKAHEAD(2) (
            LOOKAHEAD(builtin_type_specifier()) builtin_type_specifier()
          |
            tmp = type_modifiers() { isTypedef |= tmp; } )
         )*

   |
    (
      class_specifier()
     |
      enum_specifier()
     |
      qualified_type()
    )
    (LOOKAHEAD(2) tmp = type_modifiers() { isTypedef |= tmp; } )*
 )

 { return isTypedef; }
}

/*
void type_specifier() :
{}
{
    simple_type_specifier()
   |
    class_specifier()
   |
    enum_specifier()
}
*/

void simple_type_specifier() #SIMPLE_TYPE_SPECIFIER :
{}
{
   (
    builtin_type_specifier()
   |
    qualified_type()
   )
}

void scope_override_lookahead() #SCOPE_OVERRIDE_LOOKAHEAD :
{}
{
    "::"
   |
    <ID> ("<" template_argument_list() ">")? "::"
}

String scope_override() #SCOPE_OVERRIDE :
{
   String name = "";
   Token t;
}
{
  (
    ("::")  { name += "::"; }
    (
      LOOKAHEAD(2) t = <ID> ("<" template_argument_list() ">")? "::"
                   { name += t.image + "::"; jjtThis.value=name; }
    )*
   |
    (
      LOOKAHEAD(2) t = <ID> ("<" template_argument_list() ">")? "::"
                   { name += t.image + "::"; jjtThis.value=name; }
    )+
  )
  { return name; }
}


String qualified_id() #QUALIFIED_ID :
{
   String name = "";
   Token t;
}
{
    [ LOOKAHEAD(scope_override_lookahead()) name = scope_override() ]
    (
      t = <ID> [ "<" template_argument_list()  ">" ]
      { jjtThis.value = t.image; return name + t.image; }
     |
      "operator" optor() { return "operator"; }
    )
}

void ptr_to_member() #PTR_TO_MEMBER :
{}
{
    scope_override()  "*"
}

void qualified_type() #QUALIFIED_TYPE :
{}
{
    LOOKAHEAD({ sym.IsFullyScopedTypeName(GetFullyScopedName()) } )
        qualified_id()
}

void type_qualifier() #TYPE_QUALIFIER :
{}
{
    "const" {jjtThis.value = "const";} | "volatile" {jjtThis.value = "volatile";}
}

/**
 * Very temporary. Just returns true if it sees a typedef. Finally, we will
 * need a structure that stores all the attributes.
 */
boolean storage_class_specifier() #STORAGE_CLASS_SPECIFIER :
{}
{
   ( "auto" | "register" | "static" {jjtThis.value = "static";} | "extern" ) { return false; }
   | "typedef"  { return true; }
}

void builtin_type_specifier() #BUILTIN_TYPE_SPECIFIER :
{Token t;}
{
   t="void" {jjtThis.value = t.image;} | t="char" {jjtThis.value = t.image;} | 
   t="short" {jjtThis.value = t.image;} | t="int" {jjtThis.value = t.image;} | 
   t="long" {jjtThis.value = t.image;} | t="float" {jjtThis.value = t.image;} |
   t="double" {jjtThis.value = t.image;} | t="signed" {jjtThis.value = t.image;} | 
   t="unsigned" {jjtThis.value = t.image;} | t="bool" {jjtThis.value = "boolean";} 
}

void init_declarator_list(boolean isTypedef) #INIT_DECLARATOR_LIST :
{}
{
   init_declarator(isTypedef) ("," init_declarator(isTypedef))*
}

void init_declarator(boolean isTypedef) #INIT_DECLARATOR :
{ String name; }
{
   name = declarator()
   {
      if (isTypedef)
         sym.PutTypeName(name);
   }
   (
    "=" initializer()
   |
    "(" expression_list()  ")"
   )?
}

void class_head() #CLASS_HEAD :
{}
{
   ("struct" | "union" | "class")
   (<ID> (base_clause(null))?)?
}

void class_specifier() #CLASS_SPECIFIER :
{
   ClassScope sc = null;
   Token t;
}
{
   ("struct" | "union" | "class" )
   (
    "{"
        {
           sym.OpenScope(null, false);
        }
        (member_declaration())*
    "}"
        {
           sym.CloseScope();
        }
   |
    LOOKAHEAD(2) t = <ID>
     {
        jjtThis.value = t.image; sc = (ClassScope)sym.OpenScope(t.image, true);
     }
     (base_clause(sc))?
    "{"
      (member_declaration())*
    "}"
        {
           sym.CloseScope();
        }
   |
    t=<ID> (LOOKAHEAD(2) "<" template_argument_list()  ">")?
    { jjtThis.value = t.image; sym.PutTypeName(t.image); }
   )
}

void base_clause(ClassScope scope) #BASE_CLAUSE :
{}
{
   ":" base_specifier(scope) ( "," base_specifier(scope) )*
}

void base_specifier(ClassScope scope) #BASE_SPECIFIER :
{ Token t; }
{
   ("virtual" (access_specifier())? | access_specifier() ("virtual")?)?
   (LOOKAHEAD(scope_override_lookahead()) scope_override())?
   t = <ID> ("<" template_argument_list()  ">")?
   {
      scope.AddSuper(sym.GetScope(t.image));
      jjtThis.value=t.image;
   }
}

void access_specifier() #ACCESS_SPECIFIER :
{}
{
   "public" {jjtThis.value="public";} | "protected" {jjtThis.value="protected";} | "private" {jjtThis.value="private";}
}

void member_declaration() #MEMBER_DECLARATION :
{ boolean isTypedef = false; }
{
    LOOKAHEAD(("typedef")? class_head() "{") declaration()

   |
    LOOKAHEAD("enum" (<ID>)? "{") enum_specifier()
       ( member_declarator_list(false) )?  ";"
   |
    LOOKAHEAD( "operator" )
       conversion_function_decl_or_def()
   |
    LOOKAHEAD(dtor_ctor_decl_spec() dtor_declarator() "{")
       dtor_definition()
   |
    LOOKAHEAD(("inline"| "virtual")* "~")
       dtor_ctor_decl_spec() simple_dtor_declarator()  ";"
   |
    LOOKAHEAD(dtor_ctor_decl_spec() ctor_declarator_lookahead())
       ctor_definition()
   |
    LOOKAHEAD(dtor_ctor_decl_spec() ctor_declarator_lookahead() ";")
      (dtor_ctor_decl_spec() ctor_declarator() ";")
   |
    LOOKAHEAD((declaration_specifiers())? function_declarator_lookahead())
       function_definition()
   |
    LOOKAHEAD(declaration_specifiers())
       isTypedef = declaration_specifiers()
           (member_declarator_list(isTypedef))? ";"
   |
    LOOKAHEAD(<ID>) function_declarator(false) ";"
   |
    LOOKAHEAD(3)
     qualified_id() ";"
   |
    access_specifier()  ":"
   |
    ";"
}

void member_declarator_list(boolean isTypedef) #MEMBER_DECLARATOR_LIST :
{}
{
   member_declarator(isTypedef) ("=" <OCTALINT>)?
   ("," member_declarator(isTypedef) ("=" <OCTALINT>)?)*
}

void member_declarator(boolean isTypedef) #MEMBER_DECLARATOR :
{ String name; }
{
   name = declarator()
   {
      if (isTypedef)
         sym.PutTypeName(name);
   }
}

void conversion_function_decl_or_def() #CONVERSION_FUNCTION_DECL_OR_DEF :
{
   Scope sc = null;
   String name = null;
}
{
   [ LOOKAHEAD(scope_override_lookahead()) name = scope_override() ]

   "operator" declaration_specifiers() ("*" | "&")?

   "(" (parameter_list())? ")"
   (LOOKAHEAD(2) type_qualifier())?
   (exception_spec())?
   func_decl_def(null)  // Temporary (fix the null)
}

void enum_specifier() #ENUM_SPECIFIER :
{ Token t; }
{
   "enum"
   (
    "{" enumerator_list() "}"
   |
    t=<ID> (LOOKAHEAD(2) "{" enumerator_list() "}")?
           { sym.PutTypeName(t.image); }
   )
}

void enumerator_list() #ENUMERATOR_LIST :
{}
{
   enumerator() ("," enumerator())*
}

void enumerator() #ENUMERATOR :
{}
{
   <ID> ("=" constant_expression())?
}

void ptr_operator() #PTR_OPERATOR :
{}
{
    "&" cv_qualifier_seq()
   |
    "*" cv_qualifier_seq() {jjtThis.value="*";}
   |
    ptr_to_member() cv_qualifier_seq()
}

void cv_qualifier_seq() #CV_QUALIFIER_SEQ :
{}
{
   [ LOOKAHEAD(2) (
     "const" [ LOOKAHEAD(2) "volatile" ]
    |
     "volatile" [ LOOKAHEAD(2) "const" ] )
   ]
}

String declarator() #DECLARATOR :
{ String name; }
{
  (
    LOOKAHEAD(ptr_operator())
      ptr_operator() name = declarator()
   |
    name = direct_declarator()
  )

  { return name; }
}

String direct_declarator() #DIRECT_DECLARATOR :
{
   String name;
   Token t;
}
{
   LOOKAHEAD(2)
    "~" t = <ID> (LOOKAHEAD(2) declarator_suffixes())?
        { return "~" + t.image; }
   |
    "(" name = declarator() ")" (LOOKAHEAD(2) declarator_suffixes())?
        { return name; }
   |
    name = qualified_id() (LOOKAHEAD(2) declarator_suffixes() )?
    { jjtThis.value="VALID"; return name;}
}

void declarator_suffixes() #DECLARATOR_SUFFIXES :
{int dim=0;}
{
    ("[" (constant_expression())? "]" {dim++;})+ {jjtThis.value=dim;}
   |
    "(" (parameter_list())? ")" {jjtThis.value="()";}
    (LOOKAHEAD(2) type_qualifier())?
    (exception_spec())?
}

/**
 * Used only for lookahead.
 */
void function_declarator_lookahead() #FUNCTION_DECLARATOR_LOOKAHEAD :
{}
{
   (LOOKAHEAD(2) ptr_operator() )* qualified_id() "("
}

Scope function_declarator(boolean isTypedef) #FUNCTION_DECLARATOR :
{ Scope sc = null; }
{
  (
    LOOKAHEAD(ptr_operator())
       ptr_operator() sc = function_declarator(isTypedef)
   |
     sc = function_direct_declarator(isTypedef)
  )

  { return sc; }
}

Scope function_direct_declarator(boolean isTypedef) #FUNCTION_DIRECT_DECLARATOR :
{
  String name;
  Scope sc = null;
  boolean closeReqd = false;
}
{
     name = qualified_id()

     {
        sc = sym.GetScopeOfFullyScopedName(name);

        if (closeReqd = (sc != null && sc != sym.GetCurScope()))
           sym.OpenScope(sc);
     }

     "(" (parameter_list())?  ")"
     (LOOKAHEAD(2) type_qualifier())?
     (exception_spec())?
     (LOOKAHEAD("=") "=" <OCTALINT>)?

     {
        if (closeReqd)
           sym.CloseScope();

        if (isTypedef)
           sym.PutTypeName(name);

        return sc;
     }
}

void dtor_ctor_decl_spec() #DTOR_CTOR_DECL_SPEC :
{}
{
   [
    "virtual" [ "inline"]
   |
    "inline"  [ "virtual"]
   ]
}

void dtor_definition() #DTOR_DEFINITION :
{}
{
   (template_head())?
   dtor_ctor_decl_spec()
   dtor_declarator()
   compound_statement()
}

void ctor_definition() #CTOR_DEFINITION :
{
   Scope sc = null;
   boolean closeReqd = false;
}
{
   dtor_ctor_decl_spec() sc = ctor_declarator()

   {
      if (closeReqd = (sc != null && sc != sym.GetCurScope()))
         sym.OpenScope(sc);
   }

   (exception_spec())?

   (
     ";"
    |
     [ ctor_initializer() ] compound_statement()
   )

   { if (closeReqd) sym.CloseScope(); }
}

void ctor_declarator_lookahead() #CTOR_DECLARATOR_LOOKAHEAD :
{}
{
   LOOKAHEAD( { IsCtor() } ) qualified_id() "("
}

Scope ctor_declarator() #CTOR_DECLARATOR :
{
  String name;
  Scope sc = null;
  boolean closeReqd = false;
}
{
   LOOKAHEAD( { IsCtor() } )
      name = qualified_id()

     {
        sc = sym.GetScopeOfFullyScopedName(name);

        if (closeReqd = (sc != null && sc != sym.GetCurScope()))
           sym.OpenScope(sc);
     }

     "(" [ LOOKAHEAD(2) parameter_list() ]  ")"

     [ LOOKAHEAD(2) exception_spec() ]

     {
        if (closeReqd)
           sym.CloseScope();

        return sc;
     }
}

void ctor_initializer() #CTOR_INITIALIZER :
{}
{
   ":" superclass_init() ("," superclass_init())*
}

void superclass_init() #SUPERCLASS_INIT :
{}
{
   qualified_id()  "(" (expression_list())?  ")"
}

void dtor_declarator() #DTOR_DECLARATOR :
{}
{
   (LOOKAHEAD(scope_override_lookahead()) scope_override())?
    simple_dtor_declarator()
}

void simple_dtor_declarator() #SIMPLE_DTOR_DECLARATOR :
{}
{
   "~"
   LOOKAHEAD( { IsCtor() } ) <ID> "(" (parameter_list())?  ")"
}

void parameter_list() #PARAMETER_LIST :
{}
{
    parameter_declaration_list() [ LOOKAHEAD(2) [ "," ] "..." {jjtThis.value="INVALID";} ]
   |
    "..."
}

void parameter_declaration_list() #PARAMETER_DECLARATION_LIST :
{}
{
   parameter_declaration() (LOOKAHEAD(2) "," parameter_declaration())*
}

void parameter_declaration() #PARAMETER_DECLARATION :
{}
{
   declaration_specifiers()
   (
    LOOKAHEAD(declarator()) declarator()
   |
    abstract_declarator()
   )
   ("=" assignment_expression())?
}

void initializer() #INITIALIZER :
{}
{
    LOOKAHEAD(3)
     "{" initializer() ("," initializer())* "}" {jjtThis.value="ARRAY";}
   |
    assignment_expression()
}

void type_name() #TYPE_NAME :
{}
{
   declaration_specifiers() abstract_declarator()
}

void abstract_declarator() #ABSTRACT_DECLARATOR :
{}
{
   [ LOOKAHEAD(2) (
    "(" abstract_declarator()   ")"
    (abstract_declarator_suffix())+
   |
    ("[" (constant_expression())? "]")+
   |
    ptr_operator() abstract_declarator() )
   ]
}

void abstract_declarator_suffix() #ABSTRACT_DECLARATOR_SUFFIX :
{}
{
    "[" ( constant_expression() )?  "]"
   |
    "(" (parameter_list())? ")"
}

void template_head() #TEMPLATE_HEAD :
{}
{
   "template" "<" template_parameter_list() ">"
}

void template_parameter_list() #TEMPLATE_PARAMETER_LIST :
{}
{
   template_parameter() ("," template_parameter())*
}

void template_parameter() #TEMPLATE_PARAMETER :
{ Token t; }
{
    LOOKAHEAD(3)
      "class" t=<ID> { sym.PutTypeName(t.image); }
   |
    parameter_declaration()
}

void template_id() #TEMPLATE_ID :
{}
{
   <ID> "<" template_argument_list() ">"
}

void template_argument_list() #TEMPLATE_ARGUMENT_LIST :
{}
{
   template_argument() ("," template_argument())*
}

void template_argument() #TEMPLATE_ARGUMENT :
{}
{
    LOOKAHEAD(3)
      type_name()
   |
    shift_expression()
}

void statement_list() #STATEMENT_LIST :
{}
{
   (LOOKAHEAD(statement()) statement())+
}

void statement() #STATEMENT :
{}
{
    LOOKAHEAD( declaration() )
      declaration()
   |
    LOOKAHEAD( expression() ";" )
      expression() ";"
   |
    compound_statement()
   |
    selection_statement()
   |
    jump_statement()
   |
    ";"
   |
    try_block()
   |
    throw_statement()
   |
    LOOKAHEAD(2)
      labeled_statement()
   |
    iteration_statement()
}

void labeled_statement() #LABELED_STATEMENT :
{}
{
    <ID> ":" statement()
   |
    "case" constant_expression()  ":" statement() {jjtThis.value="case";}
   |
    "default"  ":" statement()
}

void compound_statement() #COMPOUND_STATEMENT :
{}
{
   "{"

   { sym.OpenScope(null, false); }

   (statement_list())?

   { sym.CloseScope(); }

   "}"
}

void selection_statement() #SELECTION_STATEMENT :
{}
{
    "if" "(" expression() ")" statement() {jjtThis.value="if";}
     (LOOKAHEAD(2) "else" statement())?
   |
    "switch" "(" expression() ")" statement() {jjtThis.value="switch";}
}

void iteration_statement() #ITERATION_STATEMENT :
{}
{
    "while" "(" expression() ")" statement() {jjtThis.value="while";}
   |
    "do" statement() "while" "(" expression() ")" ";" {jjtThis.value="dowhile";}
   |
    "for" "(" (LOOKAHEAD(3) declaration() | expression() ";" | ";")
    (expression())? ";" (expression())? ")" statement() {jjtThis.value="for";}
}

void jump_statement() #JUMP_STATEMENT :
{}
{
    "goto" <ID> ";"
   |
    "continue" ";"
   |
    "break" ";"
   |
    "return" (expression())? ";" {jjtThis.value="return";}
}

void try_block() #TRY_BLOCK :
{}
{
   "try" compound_statement() (handler())*
}

void handler() #HANDLER :
{}
{
   "catch" "(" exception_declaration() ")" {jjtThis.value="catch";}
   compound_statement()
 |
   "finally" compound_statement() {jjtThis.value="finally";}
}

void exception_declaration() #EXCEPTION_DECLARATION :
{}
{    parameter_declaration_list()
   |
     "..."
}

void throw_statement() #THROW_STATEMENT :
{}
{    "throw" (assignment_expression())? ";"
}

void expression() #EXPRESSION :
{}
{
   assignment_expression() ( LOOKAHEAD(2) "," assignment_expression())*
}

void assignment_expression() #ASSIGNMENT_EXPRESSION :
{}
{
    conditional_expression()
    (("=" {jjtThis.value="=";}
   | "*=" {jjtThis.value="*=";}
   | "/=" {jjtThis.value="/=";}
   | "%=" {jjtThis.value="%=";}
   | "+=" {jjtThis.value="+=";}
   | "-=" {jjtThis.value="-=";}
   | "<<=" {jjtThis.value="<<=";}
   | ">>=" {jjtThis.value=">>=";}
   | "&=" {jjtThis.value="&=";}
   | "^=" {jjtThis.value="^=";}
   | "|=" {jjtThis.value="|=";}
   )
   assignment_expression()
   )?
}

void conditional_expression() #CONDITIONAL_EXPRESSION :
{}
{   logical_or_expression()
   ("?" conditional_expression()  ":" conditional_expression())?
}

void constant_expression() #CONSTANT_EXPRESSION :
{}
{    conditional_expression()
}

void logical_or_expression() #LOGICAL_OR_EXPRESSION :
{}
{    logical_and_expression() ( "||" logical_and_expression())* {jjtThis.value="||";}
}

void logical_and_expression() #LOGICAL_AND_EXPRESSION :
{}
{    inclusive_or_expression() ( "&&" inclusive_or_expression())* {jjtThis.value="&&";}
}

void inclusive_or_expression() #INCLUSIVE_OR_EXPRESSION :
{}
{    exclusive_or_expression()( "|" exclusive_or_expression())*
}

void exclusive_or_expression() #EXCLUSIVE_OR_EXPRESSION :
{}
{    and_expression()( "^" and_expression())*
}

void and_expression() #AND_EXPRESSION :
{}
{    equality_expression()( LOOKAHEAD(2) "&" equality_expression())*
}

void equality_expression() #EQUALITY_EXPRESSION :
{}
{    relational_expression()(( "!=" {jjtThis.value="!=";} | "==" {jjtThis.value="==";} ) relational_expression())*
}

void relational_expression() #RELATIONAL_EXPRESSION :
{}
{  shift_expression()
   (
     LOOKAHEAD(2)
     (
         "<" {jjtThis.value="<";}
       | ">" {jjtThis.value=">";}
       | "<=" {jjtThis.value="<=";}
       | ">=" {jjtThis.value=">=";}
     )
     shift_expression()
   )*
}

void shift_expression() #SHIFT_EXPRESSION :
{}
{    additive_expression()(( "<<" | ">>") additive_expression())*
}

void additive_expression() #ADDITIVE_EXPRESSION :
{java.util.List<String> l = new java.util.ArrayList<String>();}
{    multiplicative_expression()
   (LOOKAHEAD(2) ( "+" {l.add("+"); } | "-" {l.add("-"); }) multiplicative_expression())* {jjtThis.value = l; }
}

void multiplicative_expression() #MULTIPLICATIVE_EXPRESSION :
{java.util.List<String> l = new java.util.ArrayList<String>();}
{  pm_expression()
   (LOOKAHEAD(2) ( "*" {l.add("*"); } | "/" {l.add("/"); } | "%" {l.add("%"); }) pm_expression())* {jjtThis.value = l; }
}

void pm_expression() #PM_EXPRESSION :
{}
{
    cast_expression() (( ".*" | "->*" ) cast_expression())*
}

void cast_expression() #CAST_EXPRESSION :
{}
{
    LOOKAHEAD( "(" type_name() ")" )
     "(" type_name() ")" cast_expression()
   |
     unary_expression()
}

void unary_expression() #UNARY_EXPRESSION :
{}
{
     "++" unary_expression() {jjtThis.value="++";}
   |
     "--" unary_expression() {jjtThis.value="--";}
   |
     LOOKAHEAD(3)
     unary_operator() cast_expression()
   |
     "sizeof"
     (
       LOOKAHEAD("(")
       "(" type_name()  ")"
     |
       unary_expression()
     )
   |
     postfix_expression() {jjtThis.value="VALID";}
}

void new_expression() #NEW_EXPRESSION :
{}
{
   (LOOKAHEAD("::") ("::"))?
   "new"
   (
     LOOKAHEAD("(" type_name() ")" )
      "(" type_name() ")"
    |
     (LOOKAHEAD("(" expression_list() ) "(" expression_list() ")")?
     (
       LOOKAHEAD("(" type_name() ")" )
       "(" type_name() ")"
      |
       LOOKAHEAD(declaration_specifiers())
        new_type_id()
     )
   )
   (LOOKAHEAD(new_initializer()) new_initializer())?
}

void new_type_id() #NEW_TYPE_ID :
{}
{
   declaration_specifiers()
   ( LOOKAHEAD(new_declarator()) new_declarator() )?
}

void new_declarator() #NEW_DECLARATOR :
{}
{
     direct_new_declarator()
   |
     ptr_operator() cv_qualifier_seq()  [ LOOKAHEAD(2) new_declarator() ]
}

void direct_new_declarator() #DIRECT_NEW_DECLARATOR :
{}
{
   (LOOKAHEAD(2) "[" expression() "]" )+
}

void new_initializer() #NEW_INITIALIZER :
{}
{    "(" ( expression_list() )? ")"
}

void delete_expression() #DELETE_EXPRESSION :
{}
{    ( "::" )? "delete" ( "[" "]" )? cast_expression()
}

void unary_operator() #UNARY_OPERATOR :
{}
{    "&"
   | "*" {jjtThis.value="*";}
   | "+" 
   | "-"
   | "~"
   | "!" {jjtThis.value="!";}
}

void postfix_expression() #POSTFIX_EXPRESSION :
{Token t; int c=0;}
{
   LOOKAHEAD(3)
    primary_expression()
    ( LOOKAHEAD(2) (
     "[" expression() "]" {jjtThis.value="[]";}
    |
     "(" ( expression_list() )? ")" {jjtThis.value="()";}
    |
     "." id_expression()
    |
     "->" id_expression()
    |
     "++" {jjtThis.value="++"; c++;}
    |
     "--" {jjtThis.value="--"; c++;})
     )* {if (c > 1){ jjtThis.value="ERROR";} }
  |
   simple_type_specifier() "(" ( expression_list() )? ")"
}

void id_expression() #ID_EXPRESSION :
{Token t;}
{
   (LOOKAHEAD(scope_override_lookahead()) scope_override())?
   (     t=<ID> {jjtThis.value = t.image;}
   | "operator" optor()
   | "~"  t=<ID> {jjtThis.value = t.image;}
   )
}

void primary_expression() #PRIMARY_EXPRESSION :
{Token t;}
{
     "this" {jjtThis.value = "this";}
   | ( LOOKAHEAD(2) t=<STRING> )+ {jjtThis.value = t.image;}
   | "(" expression()  ")" 
   |
     LOOKAHEAD( ("::")? "new")
     new_expression()
   |
     LOOKAHEAD( ("::")? "delete")
     delete_expression()
   | id_expression()
   | constant()
}

void expression_list() #EXPRESSION_LIST :
{}
{    assignment_expression()( "," assignment_expression())*
}

void constant() #CONSTANT :
{Token t;}
{    t=<OCTALINT> {jjtThis.value = t.image; jjtThis.type = "int";}
   | t=<OCTALLONG> {jjtThis.value = t.image; jjtThis.type = "int";}
   | t=<DECIMALINT> {jjtThis.value = t.image; jjtThis.type = "int";}
   | t=<DECIMALLONG> {jjtThis.value = t.image; jjtThis.type = "int";}
   | t=<HEXADECIMALINT> {jjtThis.value = t.image; jjtThis.type = "int";}
   | t=<HEXADECIMALLONG> {jjtThis.value = t.image; jjtThis.type = "int";}

   | t=<UNSIGNED_OCTALINT> {jjtThis.value = t.image; jjtThis.type = "int";}
   | t=<UNSIGNED_OCTALLONG> {jjtThis.value = t.image; jjtThis.type = "int";}
   | t=<UNSIGNED_DECIMALINT> {jjtThis.value = t.image; jjtThis.type = "int";}
   | t=<UNSIGNED_DECIMALLONG> {jjtThis.value = t.image; jjtThis.type = "int";}
   | t=<UNSIGNED_HEXADECIMALINT> {jjtThis.value = t.image; jjtThis.type = "int";}
   | t=<UNSIGNED_HEXADECIMALLONG> {jjtThis.value = t.image; jjtThis.type = "int";}

   | t=<CHARACTER> {jjtThis.value = t.image; jjtThis.type = "char";}
   | t=<FLOATONE> {jjtThis.value = t.image; jjtThis.type = "float";}
   | t=<FLOATTWO> {jjtThis.value = t.image; jjtThis.type = "float";}
   | t="true" {jjtThis.value = t.image; jjtThis.type = "boolean";}
   | t="false" {jjtThis.value = t.image; jjtThis.type = "boolean";}
}

void optor() #OPTOR :
{}
{
     "new" [ LOOKAHEAD(2) "[" "]" ]
   | "delete" [ LOOKAHEAD(2) "[" "]" ]
   | "+"
   | "-"
   | "*"
   | "/"
   | "%"
   | "^"
   | "&"
   | "|"
   | "~"
   | "!"
   | "="
   | "<"
   | ">"
   | "+="
   | "-="
   | "*="
   | "/="
   | "%="
   | "^="
   | "&="
   | "|="
   | "<<"
   | ">>"
   | ">>="
   | "<<="
   | "=="
   | "!="
   | "<="
   | ">="
   | "&&"
   | "||"
   | "++"
   | "--"
   | ","
   | "->*"
   | "->"
   | "(" ")"
   | "[" "]"
   | declaration_specifiers() (LOOKAHEAD(2) ("*"|"&"))?
}

void exception_spec() #EXCEPTION_SPEC :
{}
{
   "throw" "(" exception_list() ")"
}

void exception_list() #EXCEPTION_LIST :
{}
{
   type_name() ( "," type_name())*
}

TOKEN :
{
  <  ID : ["a"-"z","A"-"Z", "_"] (["a"-"z","A"-"Z","0"-"9","_"])* >
}


/*end*/

