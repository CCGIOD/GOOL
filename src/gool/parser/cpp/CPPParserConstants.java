/* Generated By:JJTree&JavaCC: Do not edit this line. CPPParserConstants.java */
//package net.sourceforge.pmd.cpd.cppast;

package gool.parser.cpp;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CPPParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LCURLYBRACE = 18;
  /** RegularExpression Id. */
  int RCURLYBRACE = 19;
  /** RegularExpression Id. */
  int LSQUAREBRACKET = 20;
  /** RegularExpression Id. */
  int RSQUAREBRACKET = 21;
  /** RegularExpression Id. */
  int LPARENTHESIS = 22;
  /** RegularExpression Id. */
  int RPARENTHESIS = 23;
  /** RegularExpression Id. */
  int SCOPE = 24;
  /** RegularExpression Id. */
  int COLON = 25;
  /** RegularExpression Id. */
  int SEMICOLON = 26;
  /** RegularExpression Id. */
  int COMMA = 27;
  /** RegularExpression Id. */
  int QUESTIONMARK = 28;
  /** RegularExpression Id. */
  int ELLIPSIS = 29;
  /** RegularExpression Id. */
  int ASSIGNEQUAL = 30;
  /** RegularExpression Id. */
  int TIMESEQUAL = 31;
  /** RegularExpression Id. */
  int DIVIDEEQUAL = 32;
  /** RegularExpression Id. */
  int MODEQUAL = 33;
  /** RegularExpression Id. */
  int PLUSEQUAL = 34;
  /** RegularExpression Id. */
  int MINUSEQUAL = 35;
  /** RegularExpression Id. */
  int SHIFTLEFTEQUAL = 36;
  /** RegularExpression Id. */
  int SHIFTRIGHTEQUAL = 37;
  /** RegularExpression Id. */
  int BITWISEANDEQUAL = 38;
  /** RegularExpression Id. */
  int BITWISEXOREQUAL = 39;
  /** RegularExpression Id. */
  int BITWISEOREQUAL = 40;
  /** RegularExpression Id. */
  int OR = 41;
  /** RegularExpression Id. */
  int AND = 42;
  /** RegularExpression Id. */
  int BITWISEOR = 43;
  /** RegularExpression Id. */
  int BITWISEXOR = 44;
  /** RegularExpression Id. */
  int AMPERSAND = 45;
  /** RegularExpression Id. */
  int EQUAL = 46;
  /** RegularExpression Id. */
  int NOTEQUAL = 47;
  /** RegularExpression Id. */
  int LESSTHAN = 48;
  /** RegularExpression Id. */
  int GREATERTHAN = 49;
  /** RegularExpression Id. */
  int LESSTHANOREQUALTO = 50;
  /** RegularExpression Id. */
  int GREATERTHANOREQUALTO = 51;
  /** RegularExpression Id. */
  int SHIFTLEFT = 52;
  /** RegularExpression Id. */
  int SHIFTRIGHT = 53;
  /** RegularExpression Id. */
  int PLUS = 54;
  /** RegularExpression Id. */
  int MINUS = 55;
  /** RegularExpression Id. */
  int STAR = 56;
  /** RegularExpression Id. */
  int DIVIDE = 57;
  /** RegularExpression Id. */
  int MOD = 58;
  /** RegularExpression Id. */
  int PLUSPLUS = 59;
  /** RegularExpression Id. */
  int MINUSMINUS = 60;
  /** RegularExpression Id. */
  int TILDE = 61;
  /** RegularExpression Id. */
  int NOT = 62;
  /** RegularExpression Id. */
  int DOT = 63;
  /** RegularExpression Id. */
  int POINTERTO = 64;
  /** RegularExpression Id. */
  int DOTSTAR = 65;
  /** RegularExpression Id. */
  int ARROWSTAR = 66;
  /** RegularExpression Id. */
  int AUTO = 67;
  /** RegularExpression Id. */
  int BREAK = 68;
  /** RegularExpression Id. */
  int CASE = 69;
  /** RegularExpression Id. */
  int CATCH = 70;
  /** RegularExpression Id. */
  int CHAR = 71;
  /** RegularExpression Id. */
  int CONST = 72;
  /** RegularExpression Id. */
  int CONTINUE = 73;
  /** RegularExpression Id. */
  int _DEFAULT = 74;
  /** RegularExpression Id. */
  int DELETE = 75;
  /** RegularExpression Id. */
  int DO = 76;
  /** RegularExpression Id. */
  int DOUBLE = 77;
  /** RegularExpression Id. */
  int ELSE = 78;
  /** RegularExpression Id. */
  int ENUM = 79;
  /** RegularExpression Id. */
  int EXTERN = 80;
  /** RegularExpression Id. */
  int FLOAT = 81;
  /** RegularExpression Id. */
  int FOR = 82;
  /** RegularExpression Id. */
  int FRIEND = 83;
  /** RegularExpression Id. */
  int GOTO = 84;
  /** RegularExpression Id. */
  int IF = 85;
  /** RegularExpression Id. */
  int INLINE = 86;
  /** RegularExpression Id. */
  int INT = 87;
  /** RegularExpression Id. */
  int LONG = 88;
  /** RegularExpression Id. */
  int NEW = 89;
  /** RegularExpression Id. */
  int PRIVATE = 90;
  /** RegularExpression Id. */
  int PROTECTED = 91;
  /** RegularExpression Id. */
  int PUBLIC = 92;
  /** RegularExpression Id. */
  int REDECLARED = 93;
  /** RegularExpression Id. */
  int REGISTER = 94;
  /** RegularExpression Id. */
  int RETURN = 95;
  /** RegularExpression Id. */
  int SHORT = 96;
  /** RegularExpression Id. */
  int SIGNED = 97;
  /** RegularExpression Id. */
  int SIZEOF = 98;
  /** RegularExpression Id. */
  int STATIC = 99;
  /** RegularExpression Id. */
  int STRUCT = 100;
  /** RegularExpression Id. */
  int CLASS = 101;
  /** RegularExpression Id. */
  int SWITCH = 102;
  /** RegularExpression Id. */
  int TEMPLATE = 103;
  /** RegularExpression Id. */
  int THIS = 104;
  /** RegularExpression Id. */
  int TRY = 105;
  /** RegularExpression Id. */
  int TYPEDEF = 106;
  /** RegularExpression Id. */
  int UNION = 107;
  /** RegularExpression Id. */
  int UNSIGNED = 108;
  /** RegularExpression Id. */
  int VIRTUAL = 109;
  /** RegularExpression Id. */
  int VOID = 110;
  /** RegularExpression Id. */
  int VOLATILE = 111;
  /** RegularExpression Id. */
  int WHILE = 112;
  /** RegularExpression Id. */
  int OPERATOR = 113;
  /** RegularExpression Id. */
  int TRUETOK = 114;
  /** RegularExpression Id. */
  int FALSETOK = 115;
  /** RegularExpression Id. */
  int THROW = 116;
  /** RegularExpression Id. */
  int INCLUDE = 117;
  /** RegularExpression Id. */
  int OCTALINT = 118;
  /** RegularExpression Id. */
  int OCTALLONG = 119;
  /** RegularExpression Id. */
  int UNSIGNED_OCTALINT = 120;
  /** RegularExpression Id. */
  int UNSIGNED_OCTALLONG = 121;
  /** RegularExpression Id. */
  int DECIMALINT = 122;
  /** RegularExpression Id. */
  int DECIMALLONG = 123;
  /** RegularExpression Id. */
  int UNSIGNED_DECIMALINT = 124;
  /** RegularExpression Id. */
  int UNSIGNED_DECIMALLONG = 125;
  /** RegularExpression Id. */
  int HEXADECIMALINT = 126;
  /** RegularExpression Id. */
  int HEXADECIMALLONG = 127;
  /** RegularExpression Id. */
  int UNSIGNED_HEXADECIMALINT = 128;
  /** RegularExpression Id. */
  int UNSIGNED_HEXADECIMALLONG = 129;
  /** RegularExpression Id. */
  int FLOATONE = 130;
  /** RegularExpression Id. */
  int FLOATTWO = 131;
  /** RegularExpression Id. */
  int CHARACTER = 132;
  /** RegularExpression Id. */
  int PATH_STRING = 133;
  /** RegularExpression Id. */
  int STRING = 134;
  /** RegularExpression Id. */
  int ID = 137;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_COMMENT = 2;
  /** Lexical state. */
  int PREPROCESSOR_OUTPUT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\\n\"",
    "\"\\n\"",
    "\"//\"",
    "\"/*\"",
    "\"#ifdef\"",
    "\"#ifndef\"",
    "\"#endif\"",
    "\"\\n\"",
    "<token of kind 11>",
    "\"*/\"",
    "<token of kind 13>",
    "\"\\n\"",
    "\"\\\\\\n\"",
    "\"\\\\\\r\\n\"",
    "<token of kind 17>",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"::\"",
    "\":\"",
    "\";\"",
    "\",\"",
    "\"?\"",
    "\"...\"",
    "\"=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"+=\"",
    "\"-=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"&=\"",
    "\"^=\"",
    "\"|=\"",
    "\"||\"",
    "\"&&\"",
    "\"|\"",
    "\"^\"",
    "\"&\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"<<\"",
    "\">>\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"++\"",
    "\"--\"",
    "\"~\"",
    "\"!\"",
    "\".\"",
    "\"->\"",
    "\".*\"",
    "\"->*\"",
    "\"auto\"",
    "\"break\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"delete\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"extern\"",
    "\"float\"",
    "\"for\"",
    "\"friend\"",
    "\"goto\"",
    "\"if\"",
    "\"inline\"",
    "\"int\"",
    "\"long\"",
    "\"new\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"redeclared\"",
    "\"register\"",
    "\"return\"",
    "\"short\"",
    "\"signed\"",
    "\"sizeof\"",
    "\"static\"",
    "\"struct\"",
    "\"class\"",
    "\"switch\"",
    "\"template\"",
    "\"this\"",
    "\"try\"",
    "\"typedef\"",
    "\"union\"",
    "\"unsigned\"",
    "\"virtual\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "\"operator\"",
    "\"true\"",
    "\"false\"",
    "\"throw\"",
    "\"#include\"",
    "<OCTALINT>",
    "<OCTALLONG>",
    "<UNSIGNED_OCTALINT>",
    "<UNSIGNED_OCTALLONG>",
    "<DECIMALINT>",
    "<DECIMALLONG>",
    "<UNSIGNED_DECIMALINT>",
    "<UNSIGNED_DECIMALLONG>",
    "<HEXADECIMALINT>",
    "<HEXADECIMALLONG>",
    "<UNSIGNED_HEXADECIMALINT>",
    "<UNSIGNED_HEXADECIMALLONG>",
    "<FLOATONE>",
    "<FLOATTWO>",
    "<CHARACTER>",
    "<PATH_STRING>",
    "<STRING>",
    "\"bool\"",
    "\"finally\"",
    "<ID>",
  };

}
